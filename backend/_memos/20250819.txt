기억나는대로 서비스의 흐름 적어보기


1. 기동 단계

infra의 docker-compose 가동으로 시작(현재는 여기에서 db, rabbitMQ, zipkin을 먼저 가동하고 시작)
config server 기동
eureka server 기동
api gateway, user/product/order/payment/notification service 기동

# 차후 도커 컴포즈에 모든 서비스를 통합한다면 실행순서는 조금 달라질 것

frontend에서 npm run dev



2. 서비스간 연결 및 작업흐름

프론트 서비스에서 api gateway를 통해 백엔드 서비스 모음에 접근
user service를 통해 로그인
product service를 통해 상품 목록을 확인
그 중에서 원하는 상품을 골라 주문

프론트 서비스의 주문요청을 확인한 order service가 작동
- (UserServiceClient) OpenFeign Client를 통해 user service에서 주문자 정보 획득
- 주문에 필요한 정보를 order service 자체 db에 저장
- (OrderEventPublisher) RabbitMQ를 통해 주문 생성 이벤트 발행, 큐를 통해 notification service와 product service에 전송

notification service는 생략

product service가 order service에서 발행된 주문 요청 이벤트를 수신, product service가 작동
- (ProductSagaHandler) 수신한 주문 생성 이벤트의 정보에 따라 재고차감 시도
-- (ProductSagaPublisher) 실패시 order service에 주문 취소 이벤트 발행
-- (ProductSagaPublisher) 성공시 payment service에 결제 요청 이벤트 발행

payment service가 product service에서 발행된 결제 요청 이벤트를 수신, payment service가 작동
- (PaymentSagaHandler) 수신한 결제 요청 이벤트의 정보에 따라 결제 시도
-- (PaymentSagaPublisher) 결제가 성공하면 결제 성공 이벤트를 order service에 발행
-- (PaymentSagaPublisher) 결제가 실패하면 결제 실패 이벤트를 order service와 product service에 발행

결제가 성공하면 order service가 OrderSagaHandler를 통해 이벤트를 수신해 최종적으로 주문 처리를 완료하고,
결제가 실패하면 order service와 product service가 이벤트를 수신해 주문을 취소시키고 차감했던 재고를 복구한다



3. 각종 의존성

서비스 서버별 설정을 관리하기 위한 Config Server, 이걸 가져오기 위한 Config Client
서비스간 통신을 위해 설치한 서버의 Eureka Server, 이걸 사용하기 위한 Eureka Discovery Client
외부 서비스(이 경우 프론트엔드 서비스)와 연결하기 위한 Gateway
분산 트레이스를 위한
    Micrometer : implementation 'io.micrometer:micrometer-tracing-bridge-otel'
	Zipkin : implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
외부 서비스 통신을 위한 OpenFeign
이벤트를 통한 비동기 통신을 위한 RabbitMQ

서비스 회복성 패턴을 위한 Resilience4j
서비스 상태 관리를 위한 Spring Boot Actuator





이번에 학습한 Spring Cloud를 통한 MSA의 전체 틀에 대해서 내가 메모한 내용이야
의존성 설명 부분은 반드시 넣어서 첨삭자료를 만들어줘
ChatGPT의 말:

좋습니다 👍
메모해주신 내용을 제가 정리·보강해서 학습 정리용 첨삭 자료로 만들어드릴게요.
흐름은 최대한 유지하면서, 개념적으로 중요한 부분(왜 필요한지, 어떤 역할인지)을 더 명확히 붙였습니다.

Spring Cloud 기반 MSA 학습 정리
1. 서비스 기동 단계

인프라 레벨 기동 (Docker Compose)

현재: DB, RabbitMQ, Zipkin 등을 Docker Compose로 실행

차후: 모든 마이크로서비스를 하나의 docker-compose.yml로 통합하여 실행 순서를 제어할 예정

Spring Cloud Config Server 기동

각 마이크로서비스의 외부 설정을 중앙에서 관리

Eureka Server 기동

서비스 레지스트리 역할을 하여, 각 서비스가 자신을 등록하고 서로의 위치를 탐색할 수 있도록 지원

주요 서비스 기동

API Gateway, User Service, Product Service, Order Service, Payment Service, Notification Service 실행

프론트엔드 기동

npm run dev 명령으로 React/Vue 등의 프론트엔드 실행

2. 서비스간 연결 및 작업 흐름

프론트엔드 → API Gateway

모든 요청은 API Gateway를 통해 백엔드 서비스에 전달됨

로그인 처리

User Service를 통해 사용자 로그인 진행

상품 확인 및 주문 요청

Product Service를 통해 상품 목록 확인

사용자가 상품을 선택해 주문 요청을 보내면, Order Service가 이를 처리 시작

주문 처리 시퀀스 (Saga 패턴 기반)

Order Service

UserServiceClient(OpenFeign)으로 사용자 정보 조회

자체 DB에 주문 정보 저장

OrderEventPublisher(RabbitMQ)를 통해 주문 생성 이벤트 발행

이벤트는 Notification Service, Product Service로 전달

Product Service

ProductSagaHandler가 주문 이벤트 수신

재고 차감 시도

실패 시 → ProductSagaPublisher가 주문 취소 이벤트를 Order Service로 발행

성공 시 → ProductSagaPublisher가 결제 요청 이벤트를 Payment Service로 발행

Payment Service

PaymentSagaHandler가 결제 요청 이벤트 수신

결제 시도

성공 시 → PaymentSagaPublisher가 결제 성공 이벤트를 Order Service로 발행

실패 시 → PaymentSagaPublisher가 결제 실패 이벤트를 Order Service와 Product Service로 발행

최종 처리

결제 성공 → Order Service가 이벤트를 수신하여 주문 완료

결제 실패 → Order Service와 Product Service가 이벤트를 수신하여 주문 취소 및 재고 복구

3. 주요 의존성 및 기술 스택

Config Server / Config Client

서비스별 설정 파일을 중앙에서 관리하고 동적으로 반영

Eureka Server / Discovery Client

서비스 레지스트리 및 클라이언트 사이의 동적 서비스 탐색

API Gateway

외부 클라이언트가 내부 서비스에 접근하는 단일 진입점

Micrometer + Zipkin

분산 트레이싱 및 모니터링

micrometer-tracing-bridge-otel, opentelemetry-exporter-zipkin 사용

OpenFeign

서비스 간 HTTP 통신을 간소화한 선언형 REST 클라이언트

RabbitMQ

비동기 이벤트 기반 메시지 브로커

발행/구독(Publish/Subscribe), 소비(Consume)를 통한 이벤트 흐름 구현

Resilience4j

회복성 패턴 적용 (Circuit Breaker, Retry, Rate Limiter 등)

장애 상황에서도 서비스 연속성을 보장

Spring Boot Actuator

서비스의 상태 및 메트릭 제공

헬스체크 및 운영 모니터링에 활용

요약 포인트

MSA의 핵심: 서비스간 강한 결합을 피하고, 각 서비스는 독립적으로 배포/확장 가능해야 한다.

이벤트 기반 Saga 패턴: 트랜잭션 일관성을 보장하기 위해 RabbitMQ 이벤트를 활용해 주문-재고-결제-알림 플로우를 관리.

Spring Cloud 전체 틀:

서비스 발견 (Eureka),

설정 관리 (Config),

API Gateway,

분산 추적 (Micrometer + Zipkin),

회복성 (Resilience4j),

모니터링 (Actuator)